增广路径性质

由增广路的定义可以推出下述三个结论：

P的路径长度必定为奇数，第一条边和最后一条边都不属于M，因为两个端点分属两个集合，且未匹配。
P经过取反操作可以得到一个更大的匹配M’。
M为G的最大匹配当且仅当不存在相对于M的增广路径。
匈牙利算法

用增广路求最大匹配(称作匈牙利算法，匈牙利数学家Edmonds于1965年提出) 
算法轮廓：

置M为空
找出一条增广路径P，通过取反操作获得更大的匹配M’代替M
重复2操作直到找不出增广路径为止
找增广路径的算法

我们采用DFS的办法找一条增广路径： 
从X部一个未匹配的顶点u开始，找一个未访问的邻接点v（v一定是Y部顶点）。对于v，分两种情况：

如果v未匹配，则已经找到一条增广路
如果v已经匹配，则取出v的匹配顶点w(w一定是X部顶点)，边(w,v)目前是匹配的，根据“取反”的想法，要将(w,v)改为未匹配，(u,v)设为匹配，能实现这一点的条件是看从w为起点能否新找到一条增广路径P’。如果行，则u-v-P’就是一条以u为起点的增广路径。
匈牙利算法

cx[i]表示与X部i点匹配的Y部顶点编号 
cy[i]表示与Y部i点匹配的X部顶点编号

//伪代码
bool dfs(int u)//寻找从u出发的增广路径
{
    for each v∈u的邻接点
        if(v未访问){
            标记v已访问;
            if(v未匹配||dfs(cy[v])){
                cx[u]=v;
                cy[v]=u; 
                return true;//有从u出发的增广路径
            }
        }
    return false;//无法找到从u出发的增广路径
}
//代码
bool dfs(int u){
    for(int v=1;v<=m;v++)
        if(t[u][v]&&!vis[v]){
            vis[v]=1;
            if(cy[v]==-1||dfs(cy[v])){
                cx[u]=v;cy[v]=u;
                return 1;
            }
        }
    return 0;
}
void maxmatch()//匈牙利算法主函数
{
    int ans=0;
    memset(cx,0xff,sizeof cx);
    memset(cy,0xff,sizeof cy);
    for(int i=0;i<=nx;i++) 
        if(cx[i]==-1)//如果i未匹配
        { 
            memset(visit,false,sizeof(visit)) ; 
            ans += dfs(i); 
        }
    return ans ;
} 

算法分析

算法的核心是找增广路径的过程DFS 
对于每个可以与u匹配的顶点v，假如它未被匹配，可以直接用v与u匹配； 
如果v已与顶点w匹配，那么只需调用dfs(w)来求证w是否可以与其它顶点匹配，如果dfs(w)返回true的话，仍可以使v与u匹配；如果dfs(w)返回false,则检查u的下一个邻接点……. 
在dfs时，要标记访问过的顶点（visit[j]=true），以防死循环和重复计算；每次在主过程中开始一次dfs前，所有的顶点都是未标记的。 
主过程只需对每个X部的顶点调用dfs，如果返回一次true，就对最大匹配数加一；一个简单的循环就求出了最大匹配的数目。

时空分析

时间复杂度： 
找一次增广路径的时间为： 
邻接矩阵： O(n^2)
邻接表：O(n+m)
总时间： 
邻接矩阵：O(n^3)
邻接表：O(nm)
空间复杂度： 
邻接矩阵：O(n^2)
邻接表： O(m+n)
--------------------- 
作者：C20180630_zjf 
来源：CSDN 
原文：https://blog.csdn.net/C20180630/article/details/70175814?utm_source=copy 
版权声明：本文为博主原创文章，转载请附上博文链接！
